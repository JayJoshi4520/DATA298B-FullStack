#!/usr/bin/env python3
"""
Script to create a simple calculator React app
Generated by CodeWriterAgent
"""
import os
import json
from pathlib import Path

def main():
    base_path = "/home/coder/project/"
    project_name = "calculator-react-app"
    project_path = os.path.join(base_path, project_name)

    # Define directory structure
    dirs_to_create = [
        project_path,
        os.path.join(project_path, "public"),
        os.path.join(project_path, "src")
    ]

    try:
        # Create directories
        print(f"Creating project at: {project_path}")
        for path in dirs_to_create:
            os.makedirs(path, exist_ok=True)
            print(f"Created directory: {path}")

        # --- Create files with actual content ---

        # README.md
        readme_content = """# Simple React Calculator

This is a basic calculator application built with React.

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

## How to Set Up and Run

1.  Navigate into the project directory:
    ```bash
    cd calculator-react-app
    ```
2.  Install dependencies:
    ```bash
    npm install
    # or
    yarn install
    ```
3.  Start the development server:
    ```bash
    npm start
    # or
    yarn start
    ```
    Your browser should automatically open to `http://localhost:3000`.
"""
        with open(os.path.join(project_path, "README.md"), 'w', encoding='utf-8') as f:
            f.write(readme_content)
        print(f"Created file: {os.path.join(project_path, 'README.md')}")

        # .gitignore
        gitignore_content = """# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
.yarn/install-state.gz

# Runtime data
.vscode-test-install
.vscode-test-install-darwin
.vscode-test-install-linux
.vscode-test-install-win32

# Dependencies
node_modules/
/dist/
/build/

# IDE specific files
.idea/
.vscode/
*.swp
*.bak
*.swo

# macOS
.DS_Store

# Windows
Thumbs.db
"""
        with open(os.path.join(project_path, ".gitignore"), 'w', encoding='utf-8') as f:
            f.write(gitignore_content)
        print(f"Created file: {os.path.join(project_path, '.gitignore')}")

        # package.json
        package_json_content = {
            "name": "calculator-react-app",
            "version": "0.1.0",
            "private": True,
            "dependencies": {
                "react": "^18.2.0",
                "react-dom": "^18.2.0",
                "react-scripts": "5.0.1"
            },
            "scripts": {
                "start": "react-scripts start",
                "build": "react-scripts build",
                "test": "react-scripts test",
                "eject": "react-scripts eject"
            },
            "eslintConfig": {
                "extends": [
                    "react-app",
                    "react-app/jest"
                ]
            },
            "browserslist": {
                "production": [
                    ">0.2%",
                    "not dead",
                    "not op_mini all"
                ],
                "development": [
                    "last 1 chrome version",
                    "last 1 firefox version",
                    "last 1 safari version"
                ]
            }
        }
        with open(os.path.join(project_path, "package.json"), 'w', encoding='utf-8') as f:
            json.dump(package_json_content, f, indent=2)
        print(f"Created file: {os.path.join(project_path, 'package.json')}")

        # public/index.html
        index_html_content = """<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Simple calculator web app created using React"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <title>React Calculator</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>
"""
        with open(os.path.join(project_path, "public", "index.html"), 'w', encoding='utf-8') as f:
            f.write(index_html_content)
        print(f"Created file: {os.path.join(project_path, 'public', 'index.html')}")

        # src/index.js
        index_js_content = """import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
"""
        with open(os.path.join(project_path, "src", "index.js"), 'w', encoding='utf-8') as f:
            f.write(index_js_content)
        print(f"Created file: {os.path.join(project_path, 'src', 'index.js')}")

        # src/App.js
        app_js_content = """import React, { useState } from 'react';
import './App.css';

function App() {
  const [displayValue, setDisplayValue] = useState('0');
  const [firstOperand, setFirstOperand] = useState(null);
  const [operator, setOperator] = useState(null);
  const [waitingForSecondOperand, setWaitingForSecondOperand] = useState(false);

  const inputDigit = (digit) => {
    if (waitingForSecondOperand) {
      setDisplayValue(String(digit));
      setWaitingForSecondOperand(false);
    } else {
      setDisplayValue(displayValue === '0' ? String(digit) : displayValue + digit);
    }
  };

  const inputDecimal = () => {
    if (waitingForSecondOperand) {
      setDisplayValue('0.');
      setWaitingForSecondOperand(false);
      return;
    }
    if (!displayValue.includes('.')) {
      setDisplayValue(displayValue + '.');
    }
  };

  const clearDisplay = () => {
    setDisplayValue('0');
    setFirstOperand(null);
    setOperator(null);
    setWaitingForSecondOperand(false);
  };

  const performOperation = (nextOperator) => {
    const inputValue = parseFloat(displayValue);

    if (firstOperand === null && !isNaN(inputValue)) {
      setFirstOperand(inputValue);
    } else if (operator) {
      const result = calculate(firstOperand, inputValue, operator);
      setDisplayValue(String(parseFloat(result.toFixed(7)))); // Limit precision and remove trailing zeros
      setFirstOperand(result);
    }

    setWaitingForSecondOperand(true);
    setOperator(nextOperator);
  };

  const calculate = (first, second, op) => {
    switch (op) {
      case '+':
        return first + second;
      case '-':
        return first - second;
      case '*':
        return first * second;
      case '/':
        if (second === 0) {
          alert("Cannot divide by zero!");
          return first; // Or handle as an error state
        }
        return first / second;
      case '=':
        return second;
      default:
        return second;
    }
  };

  return (
    <div className="calculator">
      <div className="calculator-display">{displayValue}</div>
      <div className="calculator-keys">
        <button className="operator" onClick={() => performOperation('+')}>+</button>
        <button className="operator" onClick={() => performOperation('-')}>-</button>
        <button className="operator" onClick={() => performOperation('*')}>&times;</button>
        <button className="operator" onClick={() => performOperation('/')}>&divide;</button>

        <button onClick={() => inputDigit(7)}>7</button>
        <button onClick={() => inputDigit(8)}>8</button>
        <button onClick={() => inputDigit(9)}>9</button>

        <button onClick={() => inputDigit(4)}>4</button>
        <button onClick={() => inputDigit(5)}>5</button>
        <button onClick={() => inputDigit(6)}>6</button>

        <button onClick={() => inputDigit(1)}>1</button>
        <button onClick={() => inputDigit(2)}>2</button>
        <button onClick={() => inputDigit(3)}>3</button>

        <button className="zero-btn" onClick={() => inputDigit(0)}>0</button>
        <button onClick={inputDecimal}>.</button>
        <button className="all-clear" onClick={clearDisplay}>AC</button>
        <button className="equal-sign operator" onClick={() => performOperation('=')}>=</button>
      </div>
    </div>
  );
}

export default App;
"""
        with open(os.path.join(project_path, "src", "App.js"), 'w', encoding='utf-8') as f:
            f.write(app_js_content)
        print(f"Created file: {os.path.join(project_path, 'src', 'App.js')}")

        # src/App.css
        app_css_content = """body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: #f4f4f4;
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

.calculator {
  border: 1px solid #ccc;
  border-radius: 5px;
  width: 300px;
  background-color: #333;
  box-shadow: 0px 0px 10px rgba(0,0,0,0.5);
  overflow: hidden; /* Ensures rounded corners are respected for children */
}

.calculator-display {
  padding: 20px;
  font-size: 2.5em;
  background-color: #222;
  color: #fff;
  text-align: right;
  border-bottom: 1px solid #444;
  overflow-x: auto;
  white-space: nowrap;
}

.calculator-keys {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 1px;
  background-color: #444; /* Gutter color */
}

.calculator-keys button {
  height: 60px;
  font-size: 1.5em;
  border: none;
  background-color: #e0e0e0;
  color: #333;
  cursor: pointer;
  outline: none;
  transition: background-color 0.2s;
}

.calculator-keys button:hover {
  background-color: #d0d0d0;
}

.calculator-keys button:active {
  background-color: #c0c0c0;
}

.operator {
  background-color: #f79234;
  color: #fff;
}

.operator:hover {
  background-color: #f2821a;
}

.operator:active {
  background-color: #e6750f;
}

.all-clear {
  background-color: #d15a5a;
  color: #fff;
}

.all-clear:hover {
  background-color: #c74d4d;
}

.all-clear:active {
  background-color: #b84343;
}

.equal-sign {
  background-color: #3a8ee0;
  grid-column: span 1; /* Adjust if other buttons also span */
}

.equal-sign:hover {
  background-color: #2d7cd4;
}

.equal-sign:active {
  background-color: #226dc8;
}

.zero-btn {
  grid-column: span 2; /* Span two columns */
}
"""
        with open(os.path.join(project_path, "src", "App.css"), 'w', encoding='utf-8') as f:
            f.write(app_css_content)
        print(f"Created file: {os.path.join(project_path, 'src', 'App.css')}")

        # src/index.css (minimal for reset)
        index_css_content = """body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}
"""
        with open(os.path.join(project_path, "src", "index.css"), 'w', encoding='utf-8') as f:
            f.write(index_css_content)
        print(f"Created file: {os.path.join(project_path, 'src', 'index.css')}")


        print("✓ Project created successfully!")
        print(f"\nTo run the React app:\ncd {project_path}\nnpm install\nnpm start")
        return True
    except Exception as e:
        print(f"✗ Error creating project: {e}")
        return False

if __name__ == "__main__":
    main()